---
description: general info
globs: 
---
This project uses Bun. We are using this version (2024-12-18.acacia) of the Stripe API.

The model used should be `chatgpt-4o-latest`.

This project is deployed in production to the url https://viewstodownloads.com.

Do everything you can to avoid unnecessary complexity. Showing localhost notifications is not good UX.

Keep the readme up to date with how this project works. 

Try to fix the root cause of problems.

Never make changes to the UI unless asked for directly. Most of the requests will be for functionality changes. Make the file changes yourself immediately.

When I correct you or you learn something from our interactions, suggest a new .windsurfrules rule so that you can be reminded so you don't make the same mistake twice. 

These are the keys in the .env.local file but in the real file they all have a value assigned to them.

# Supabase
NEXT_PUBLIC_SUPABASE_URL=
NEXT_PUBLIC_SUPABASE_ANON_KEY=
SUPABASE_SERVICE_ROLE_KEY=

# AWS Credentials
AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_REGION=
AWS_S3_BUCKET_NAME=

FIRECRAWL_API_KEY=
OPENAI_API_KEY=

# Stripe
NEXT_PUBLIC_STRIPE_ENV=
STRIPE_TEST_SECRET_KEY=
STRIPE_SECRET_KEY=
STRIPE_TEST_WEBHOOK_SECRET=
# STRIPE_TEST_WEBHOOK_SECRET=
NEXT_PUBLIC_STRIPE_TEST_CUSTOMER_BILLING_LINK=
NEXT_PUBLIC_STRIPE_TEST_STARTER_PRICE_ID=
NEXT_PUBLIC_STRIPE_TEST_GROWTH_PRICE_ID=
NEXT_PUBLIC_STRIPE_TEST_SCALE_PRICE_ID=
NEXT_PUBLIC_TEST_APP_URL=

# Production Environment Price IDs
NEXT_PUBLIC_STRIPE_CUSTOMER_BILLING_LINK=
NEXT_PUBLIC_STRIPE_STARTER_PRICE_ID=
NEXT_PUBLIC_STRIPE_GROWTH_PRICE_ID=
NEXT_PUBLIC_STRIPE_SCALE_PRICE_ID=

# Test Environment Payment Links
NEXT_PUBLIC_STRIPE_TEST_STARTER_LINK=
NEXT_PUBLIC_STRIPE_TEST_GROWTH_LINK=
NEXT_PUBLIC_STRIPE_TEST_SCALE_LINK=

# Production Environment Payment Links
NEXT_PUBLIC_STRIPE_STARTER_LINK=
NEXT_PUBLIC_STRIPE_GROWTH_LINK=
NEXT_PUBLIC_STRIPE_SCALE_LINK=

Here is the database schema:

# **Database Schema Overview**
This document provides an overview of the database structure, explaining each table, its fields, and relationships. The database is designed to handle applications, user-generated content, and automation hooks.

---

## **1. Tables and Relationships**
The database consists of four main tables:

1. **apps** - Stores application-related information.
2. **input_content** - Stores user input content linked to apps.
3. **output_content** - Stores processed output content linked to apps.
4. **hooks** - Stores automation rules for apps.

Each of these tables is linked to `auth.users` (Supabase authentication users) via the `user_id` field.

---

## **2. Tables and Fields Breakdown**

### **(A) apps**
Stores information about different applications.

| Column        | Type       | Description                           |
|--------------|-----------|---------------------------------------|
| id           | `uuid`    | Primary key, unique identifier for the app. |
| created_at   | `timestamptz` | Timestamp when the app was created. |
| owner_id     | `uuid`    | Foreign key referencing `auth.users.id`, indicating the owner of the app. |
| app_store_url | `text`    | URL to the app in the app store. |
| app_description | `text`    | Description of the app. |
| app_name     | `text`    | Name of the app. |
| app_logo_url | `text`    | URL to the app logo. |

**Relationships:**
- `owner_id` → `auth.users.id` (each app is owned by a user).

---

### **(B) input_content**
Stores content submitted by users to an application.

| Column      | Type       | Description                           |
|------------|-----------|---------------------------------------|
| id         | `uuid`    | Primary key, unique identifier for input content. |
| created_at | `timestamptz` | Timestamp when the input content was created. |
| user_id    | `uuid`    | Foreign key referencing `auth.users.id`, indicating which user submitted the content. |
| app_id     | `uuid`    | Foreign key referencing `apps.id`, linking content to an application. |
| content_url | `text`    | URL to the submitted content. |

**Relationships:**
- `user_id` → `auth.users.id`
- `app_id` → `apps.id`

---

### **(C) output_content**
Stores processed content generated from user input.

| Column      | Type       | Description                           |
|------------|-----------|---------------------------------------|
| id         | `uuid`    | Primary key, unique identifier for output content. |
| created_at | `timestamptz` | Timestamp when the output content was created. |
| app_id     | `uuid`    | Foreign key referencing `apps.id`, linking output to an application. |
| user_id    | `uuid`    | Foreign key referencing `auth.users.id`, indicating the user associated with the output. |
| url        | `text`    | URL to the processed output content. |
| status     | `text`    | Status of the output (e.g., "completed", "pending"). |

**Relationships:**
- `user_id` → `auth.users.id`
- `app_id` → `apps.id`

---

### **(D) hooks**
Stores automation triggers associated with apps.

| Column     | Type       | Description                           |
|-----------|-----------|---------------------------------------|
| id        | `uuid`    | Primary key, unique identifier for the hook. |
| created_at | `timestamptz` | Timestamp when the hook was created. |
| app_id    | `uuid`    | Foreign key referencing `apps.id`, linking the hook to an application. |
| user_id   | `uuid`    | Foreign key referencing `auth.users.id`, indicating which user created the hook. |
| hook_text | `text`    | Description of the hook or automation rule. |

**Relationships:**
- `user_id` → `auth.users.id`
- `app_id` → `apps.id`

---

# `subscriptions` Table Schema

The `subscriptions` table manages user subscriptions and integrates with Stripe for payment processing.

## **Primary Key**
- **`id` (UUID, Primary Key)**: Unique identifier for each subscription record.

## **Foreign Key**
- **`user_id` (UUID, Foreign Key)**: Links to the user who owns the subscription.

## **Stripe-Related Fields**
- **`stripe_customer_id` (TEXT)**: The Stripe customer ID associated with the user.
- **`stripe_subscription_id` (TEXT)**: The Stripe subscription ID corresponding to this record.
- **`stripe_price_id` (TEXT)**: The Stripe price ID associated with the subscription plan.

## **Subscription Details**
- **`plan_name` (TEXT)**: The name of the subscription plan (e.g., "Basic", "Premium").
- **`status` (TEXT)**: The current status of the subscription (e.g., "active", "canceled", "past_due").

## **Subscription Period**
- **`current_period_start` (TIMESTAMPTZ)**: Timestamp indicating the start of the current billing cycle.
- **`current_period_end` (TIMESTAMPTZ)**: Timestamp marking the end of the current billing cycle.

## **Timestamps**
- **`created_at` (TIMESTAMPTZ)**: The timestamp when the subscription record was created.
- **`updated_at` (TIMESTAMPTZ)**: The timestamp when the subscription record was last updated.

## **Usage**
This table enables tracking of user subscriptions, including linking users to their Stripe subscription details, monitoring the current billing cycle, and handling subscription status changes. It is a key part of subscription-based services where users are billed periodically.

## **3. Relationships Diagram**
Here’s a summary of how the tables connect:

- **Users (`auth.users.id`)** own **Apps (`apps.owner_id`)**.
- **Users (`auth.users.id`)** submit **Input Content (`input_content.user_id`)**.
- **Input Content (`input_content.app_id`)** is linked to **Apps (`apps.id`)**.
- **Apps (`apps.id`)** generate **Output Content (`output_content.app_id`)**.
- **Users (`auth.users.id`)** own **Hooks (`hooks.user_id`)**, which are linked to **Apps (`hooks.app_id`)**.

---

## **4. Summary**
This schema enables:
✅ Users to manage multiple apps.  
✅ Users to submit input content linked to apps.  
✅ Apps to process and generate output content.  
✅ Users to define automation hooks for apps.  

This relational setup ensures scalability and maintains a clear structure for managing applications and their associated user-generated content.

## External Video Creation API
POST /api/create-video
Process and combine videos with optional caption overlay.

Request Body:

{
  "influencerVideoUrl": "string (valid HTTP/HTTPS URL)",
  "demoFootageUrl": "string (valid HTTP/HTTPS URL)",
  "captionText": "string (optional)",
  "captionPosition": "string (optional, enum: 'top', 'middle', 'bottom', default: 'bottom')",
  "userUuid": "string",
  "appId": "string"
}
Response:

{
    "status": "completed",
    "video_url": "https://your-cdn.com/path/to/processed_video.mp4",
    "details": {
         "duration": 30.5
    },
    "output_id": "abc123"
}

Error Responses:

500 Internal Server Error: When video processing or upload fails
{
  "detail": "string (error message)"
}
Notes:

Both input video URLs must be publicly accessible HTTP/HTTPS URLs
Maximum video size and duration limits may apply based on server configuration
Processing time varies based on video length and complexity
The response video URL will be a Supabase storage URL
Processed videos are automatically cleaned up from local storage after upload

