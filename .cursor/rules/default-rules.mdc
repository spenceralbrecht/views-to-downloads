---
description: 
globs: 
alwaysApply: true
---
This project uses Bun and not npm. We are using this version (2024-12-18.acacia) of the Stripe API.

The model used should be `chatgpt-4o-latest`. When the server is running with `bun run dev` it auto refreshes.

Never overwrite a file without checking if you should just add to it first.

This project is deployed in production to the url https://viewstodownloads.com.

Do everything you can to avoid unnecessary complexity. Showing localhost notifications is not good UX. Always follow the tailwind theme so that colors and styling are kept across the application. Try to never use one-off colors and use variables as much as possible to maintain consistency.

Keep the readme up to date with how this project works. 

Try to fix the root cause of problems.

Never make changes to the UI unless asked for directly. Most of the requests will be for functionality changes. Make the file changes yourself immediately.

Never remove code that doesn't explicity effect the change I'm asking you to make. If you have to remove a large amount of code as me first.

When I ask you to fix something reflect on 5-7 different possible sources of the problem, distill those down to 1-2 most likely sources, and then add logs to validate your assumptions before we move onto implementing the actual code fix.

Here is the database schema:

# **Database Schema Overview**
This document provides an overview of the database structure, explaining each table, its fields, and relationships. The database is designed to handle applications, user-generated content, and automation hooks.

---
**Supabase Database Schema Guide for Junior Developers**

Welcome to the Supabase project! This guide will walk you through the database schema to help you understand how everything fits together. This is a high-level overview with explanations for each table and how they relate to one another.

---

### Core Concepts

- **Supabase** is an open-source Firebase alternative. It provides a Postgres database, authentication, storage, and more.
- This project uses a relational database structure. Tables are connected using foreign keys.
- Most tables reference the `auth.users` table to associate data with specific users.

---

## üìÅ Tables Overview

### 1. **apps**
This table represents different applications using the system.
- `owner_id`: References the user who owns the app.
- `is_manual`: Indicates whether the app was added manually or through an app store link.
- Other fields include name, description, store URL, and logo URL.

### 2. **input_content**
This stores raw user-submitted content (like URLs or text prompts).
- Linked to `apps` and `users` via foreign keys.

### 3. **output_content**
Contains the results generated from the input content.
- Stores whether it's published, a URL to view it, and status.
- Linked to `apps` and `users`.

### 4. **hooks**
Stores short-form video **captions** that are added to influencer videos.
- Each hook is tied to a specific app and user.

### 5. **influencer_vids**
Holds **default AI-generated influencer videos** provided by the platform.
- Each entry has a `video_url` and `thumbnail_url`.

### 6. **influencer_vid_tags**
A join table that links videos to tags (many-to-many relationship).
- Each row links one video to one tag.

### 7. **tags**
Contains descriptive tags used to categorize influencer videos.
- Each tag has a `name` and `category`.

### 8. **formats**
Represents different content formats.
- Includes name, difficulty, how it works, example content, and any required fields.

### 9. **generated_influencers**
Stores **AI-generated influencer profiles created by users**.
- Includes attributes like name, image, age, gender, ethnicity, emotion, and feature.

### 10. **subscriptions**
Tracks user subscriptions for paid features.
- Includes Stripe IDs, status, and usage metrics.

### 11. **connected_accounts**
Stores OAuth-based connections to external platforms (e.g., TikTok, Twitter).
- Includes tokens, usernames, and provider details.

---

## üîó Relationships
- `apps`, `input_content`, `output_content`, `hooks`, and `generated_influencers` all link to `auth.users.id`
- `input_content` and `output_content` both link to `apps.id`
- `influencer_vid_tags` links `influencer_vids.id` and `tags.id`
- `subscriptions` and `connected_accounts` are linked to users for account management and payment tracking

---

## üìÉ Example Flow
1. A user signs in via Supabase Auth.
2. They create an app manually or by providing an app store link.
3. They upload some content to `input_content`.
4. The system processes it and stores the result in `output_content`.
5. They can add captions to videos using the `hooks` table.
6. They can choose from default `influencer_vids` or generate new `generated_influencers`.
7. If they‚Äôre on a subscription, usage is tracked in `subscriptions`.

---

## ‚úâÔ∏è Tips for Working with the Schema
- Use Supabase's dashboard to view, query, and modify data.
- Use foreign keys to write JOIN queries between tables.
- Use UUIDs consistently for primary and foreign keys.
- Refer to `created_at` to track when a record was added.



This relational setup ensures scalability and maintains a clear structure for managing applications and their associated user-generated content.

## External Video Creation API
POST /api/create-video
Process and combine videos with optional caption overlay.

Request Body:

{
  "influencerVideoUrl": "string (valid HTTP/HTTPS URL)",
  "demoFootageUrl": "string (valid HTTP/HTTPS URL)",
  "captionText": "string (optional)",
  "captionPosition": "string (optional, enum: 'top', 'middle', 'bottom', default: 'bottom')",
  "userUuid": "string",
  "appId": "string"
}
Response:

{
    "status": "completed",
    "video_url": "https://your-cdn.com/path/to/processed_video.mp4",
    "details": {
         "duration": 30.5
    },
    "output_id": "abc123"
}

Error Responses:

500 Internal Server Error: When video processing or upload fails
{
  "detail": "string (error message)"
}
Notes:

Both input video URLs must be publicly accessible HTTP/HTTPS URLs
Maximum video size and duration limits may apply based on server configuration
Processing time varies based on video length and complexity
The response video URL will be a Supabase storage URL
Processed videos are automatically cleaned up from local storage after upload

