Here is the database schema:

# **Database Schema Overview**
This document provides an overview of the database structure, explaining each table, its fields, and relationships. The database is designed to handle applications, user-generated content, and automation hooks.

---

## **1. Tables and Relationships**
The database consists of four main tables:

1. **apps** - Stores application-related information.
2. **input_content** - Stores user input content linked to apps.
3. **output_content** - Stores processed output content linked to apps.
4. **hooks** - Stores automation rules for apps.

Each of these tables is linked to `auth.users` (Supabase authentication users) via the `user_id` field.

---

## **2. Tables and Fields Breakdown**

### **(A) apps**
Stores information about different applications.

| Column        | Type       | Description                           |
|--------------|-----------|---------------------------------------|
| id           | `uuid`    | Primary key, unique identifier for the app. |
| created_at   | `timestamptz` | Timestamp when the app was created. |
| owner_id     | `uuid`    | Foreign key referencing `auth.users.id`, indicating the owner of the app. |
| app_store_url | `text`    | URL to the app in the app store. |

**Relationships:**
- `owner_id` → `auth.users.id` (each app is owned by a user).

---

### **(B) input_content**
Stores content submitted by users to an application.

| Column      | Type       | Description                           |
|------------|-----------|---------------------------------------|
| id         | `uuid`    | Primary key, unique identifier for input content. |
| created_at | `timestamptz` | Timestamp when the input content was created. |
| user_id    | `uuid`    | Foreign key referencing `auth.users.id`, indicating which user submitted the content. |
| app_id     | `uuid`    | Foreign key referencing `apps.id`, linking content to an application. |
| content_url | `text`    | URL to the submitted content. |

**Relationships:**
- `user_id` → `auth.users.id`
- `app_id` → `apps.id`

---

### **(C) output_content**
Stores processed content generated from user input.

| Column      | Type       | Description                           |
|------------|-----------|---------------------------------------|
| id         | `uuid`    | Primary key, unique identifier for output content. |
| created_at | `timestamptz` | Timestamp when the output content was created. |
| app_id     | `uuid`    | Foreign key referencing `apps.id`, linking output to an application. |
| user_id    | `uuid`    | Foreign key referencing `auth.users.id`, indicating the user associated with the output. |
| url        | `text`    | URL to the processed output content. |
| status     | `text`    | Status of the output (e.g., "completed", "pending"). |

**Relationships:**
- `user_id` → `auth.users.id`
- `app_id` → `apps.id`

---

### **(D) hooks**
Stores automation triggers associated with apps.

| Column     | Type       | Description                           |
|-----------|-----------|---------------------------------------|
| id        | `uuid`    | Primary key, unique identifier for the hook. |
| created_at | `timestamptz` | Timestamp when the hook was created. |
| app_id    | `uuid`    | Foreign key referencing `apps.id`, linking the hook to an application. |
| user_id   | `uuid`    | Foreign key referencing `auth.users.id`, indicating which user created the hook. |
| hook_text | `text`    | Description of the hook or automation rule. |

**Relationships:**
- `user_id` → `auth.users.id`
- `app_id` → `apps.id`

---

## **3. Relationships Diagram**
Here’s a summary of how the tables connect:

- **Users (`auth.users.id`)** own **Apps (`apps.owner_id`)**.
- **Users (`auth.users.id`)** submit **Input Content (`input_content.user_id`)**.
- **Input Content (`input_content.app_id`)** is linked to **Apps (`apps.id`)**.
- **Apps (`apps.id`)** generate **Output Content (`output_content.app_id`)**.
- **Users (`auth.users.id`)** own **Hooks (`hooks.user_id`)**, which are linked to **Apps (`hooks.app_id`)**.

---

## **4. Summary**
This schema enables:
✅ Users to manage multiple apps.  
✅ Users to submit input content linked to apps.  
✅ Apps to process and generate output content.  
✅ Users to define automation hooks for apps.  

This relational setup ensures scalability and maintains a clear structure for managing applications and their associated user-generated content.

## External Video Creation API
The external API `content-creation-api.replit.app` is used to create videos and returns with this format: {
    "status": "success",
    "video_url": "https://zxwbqdkqgxhtdnvmukll.supabase.co/storage/v1/object/public/result-content/user_e3d6c0cc-e5c2-4589-a280-fcf35f602918/generated_video_1738799948146.mp4",
    "details": {
        "duration": 52.236236,
        "processingTime": 3,
        "captions": "hey what are u doing?",
        "user_folder": "user_e3d6c0cc-e5c2-4589-a280-fcf35f602918"
    }
} 

and expects this as input parameters:

POST /api/create-video
This endpoint accepts a JSON body with the following parameters:

Parameter	Type	Required	Description
influencerVideoUrl	string	Yes	URL of the influencer video to process
demoFootageUrl	string	Yes	URL of the demo footage to append
captionText	string	No	Text to overlay on the video
captionPosition	string	No	Position of the caption text. Must be one of: "top", "middle", or "bottom". Defaults to "bottom"
userUuid	string	No	Optional user ID to organize videos in folders